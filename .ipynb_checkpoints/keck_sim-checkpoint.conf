#FILE sim.conf
#Contains common parameters to all setups.

#Telescope Aperture Configuration.
# aper.d     = [10.949 1.8] #may contain one for [d] or two numbers for [d din]. d is
# 		      #outer diameter. din is optimal inner hole diameter.
aper.d     = [11.0 2.4] #may contain one for [d] or two numbers for [d din]. d is
		      #outer diameter. din is optimal inner hole diameter.
                      # Note this is the size of the pupil image in fnamp.
                      # Generated with paarti.utils.keck_utils.make_keck_pupil().
aper.fnamp    = "KECK.fits" #The amplitude map contains a cell array
	              # of 2 elements.  The first element is 5x1 vector,
	              # specifying sampling dx, dy, origin coordinate ox, oy and
	              # height (0).  The second element is a NxN square array.

aper.rotdeg   = 0     #Telescope pupil rotation CCW with respect to instrument. 
aper.pupmask  =       #Instrument pupil mask
aper.misreg   =	[0,0] #Telescope pupil misregistration. 2 element.

#defines simulation parameters.
sim.seeds     = [1]   #random seeds. a list. 0 means random seed
sim.start     = 0     #first time step. usually 0.
sim.end       = 1600  #last time step (exclusive)
sim.closeloop = 1     #closed loop simulation
sim.dt        = 1/1500 #loop sampling time. (WFS integration time). 2020-09-30
sim.dtref     = 1/1500 #reference sampling time to set signal level
sim.dtrat_skip= 0     #drop frame every this steps (sim.dt). 0 no drop.
sim.zadeg     = 30    #zenith angle. moved from atm.zadeg
sim.htel      = 4145  #height of telescope. Adjust sodium profile altitude by this.
sim.cachedm   = 4     #Caching DM commands to fine sampled grids 
	              #=1: sampling is dm.dx/4. >3: sampling is dm.dx/sim.cachedm.
sim.fov       = 0   #The entire FoV diameter in arcsec. Only used during plotting.

#Servo coefficients. There is two cycle delay.
#A is command. e is error signal. at time step n, the command is updated by
#A(n)=A(n-1)*apdm(0)+A(n-2)*apdm(1)+...+e(n-2)*ep
sim.aphi      = 1 #this is the default. [0.5 0.5] is used in laos 
sim.ephi      = 0   #error gain of high order loop.
sim.alhi      = 0.322       #Additional latency (sim.dt) of the high order loop. Can be fractional
	      	      #End to end latency is (powfs[hi].dtrat+1+alhi)*sim.dt
sim.f0dm      = 0  #Natural frequency of the DMs.
sim.zetadm    = 1  #Damping of the DMs.
sim.aplo      = ref:sim.aphi #ap for low order control. See sim.aphi
sim.eplo      = ref:sim.ephi #error gain of low order modes. See sim.ephi
sim.allo      = ref:sim.alhi #Additional latency (sim.dt) of the lo order loop. See sim.alhi
	      	      #End to end latency is (powfs[lo].dtrat+1+allo)*sim.dt
sim.fuseint   = 1     #use fused integrator. for high and low order loop.
sim.fcttm     = 20    #Cross over frequency of T/T split between DM and TTM (20)*/
#Focus tracking gains.

# RLGS/NaLGS difference 
sim.fcfocus   = inf   #cross-over frequency of the focus LPF. lpfocus=2*pi*fc/fs where fs is AO sampling frequency. 
	      	      #-1 means 1/10 of NGS frame rate. inf means remove LGS focus completely

sim.mffocus   = -1    #method for focus tracking. 
	      	      #0: disable focus update. 
		      #1: Focus tracking using closed loop gradients, for each LGS independently. (preferred)
		      #2: Focus tracking using closed loop graidnets, for common LGS focus only.
		      #-1: auto. 1 for LGS.

#Focus offloading to telescope
sim.focus2tel = 1     #Offload focus to telescope
sim.epfocus2tel=0.01  #Integrator gain for telescope focus control

#Uplink laser pointing servo #TODO: This belongs to LGS. TODO: Migrate to powfs
sim.apfsm     = ref:sim.aphi #[0.5 0.5] is used in laos. See sim.aphi
sim.epfsm     = ref:sim.ephi #uplink integrator gain. See sim.ephi
sim.alfsm     = ref:sim.alhi #Additional latency (sim.dt) of the uplink loop. See sim.alhi
	      	      #End to end latency is (powfs.dtrat+1+alfsm)*sim.dt. 
sim.commonfsm = 0     #Make FSM for each powfs common (single FSM in LLT for LGS WFS).
sim.idealfsm  = 0     #ideal correction on uplink (debugging)
sim.zetafsm   = 1     #Damping of FSM modeled as second harmonic oscillater (SHO).
sim.f0fsm     = 0     #Resonance frequency of FSM (SHO). 0: infinite.

#Twfs
sim.aptwfs    = 1     #Leak should be small if eptwfs is small.
sim.eptwfs    = 0.5   #Twfs reference vector servo gain.
sim.eptsph    = 0.5   #Twfs reference vector servo gain for spherical mode

#Other
sim.skysim    = 0     #enable presimulation for sky coverage.
#sim.wspsd    =       #Telescope wind shake PSD input. Nx2. First column is freq
#		      #in Hz, Second column is PSD in rad^2/Hz.
sim.wspsd     = "PSD_Keck_ws20mas_vib26mas_rad2.fits" # current choice
#sim.wspsd     = "PSD_TMT_ws28mas_vib15mas_rad2.bin"
#sim.wspsd = "PSD_Keck_ws20mas_vib25mas_rad2.fits"
sim.wsseq     = 1     #windshake sequency. different wsseq gives different realizations

# NCPA
ncpa.calib= 0     #calibrate NCPA. Only useful if surf is not empty. 
		      #1: use all DMs. 2: use only ground dm
ncpa.ttr  = 0     #Remove average t/t from NCPA for WFS. Equivalent as repositioning WFS.
ncpa.thetax= []   #Coordinate for NCPA calibration (arcsec). empty means follow evl.
ncpa.thetay= []   #Coordinate for NCPA calibration (arcsec)
ncpa.wt    = []   #Weight for each point.
ncpa.hs    = []   #Height of star
ncpa.preload  = 0     #1: preload integrator with DM sys flat, 0: add DM sys flat after the integrator. (engineering)
ncpa.rmsci=0     #1: do not include uncorrelatable error in science path. (engineering)

sim.dmadd     = ""    #file containing dm vector to simulate turbulence (added to integrator output). 
	              # #DM cells. In each cell, one colume is for each time step. Wraps over in the end. Can be empty.
sim.pause     = 0     #Pause after every step

#for GPU
gpu.wfs       = 1     #Use GPU for WFS sensing
gpu.evl       = 1     #Use GPU for Performance evaluation
gpu.tomo      = 1     #Use GPU for tomography
gpu.fit       = 1     #Use GPU for DM fitting
gpu.lsr       = 1     #Use GPU for LSR
gpu.psf       = 1     #Use GPU to accumulate PSF.
gpu.moao      = 1     #Use GPU for MOAO

#if mvmport is nonzero connect to the mvm server at mvmhost:mvmport.
sim.mvmhost   = "localhost" #Where does the MVM server run
sim.mvmport   = 0     #which port does the MVM server run. 0: disable mvm server/client
sim.mvmsize   = 0     #number of gradients to send each time. 0 is all.
sim.mvmngpu   = 0     #>0: limit maximum number of gpus to use.	     

#Special purpose parameters
sim.noatm     = 0     #Disable atmosphere generation (to evaluate telescope errors).
sim.evlol     = 0     #evaluate open loop performance only. Skip wfs/tomo/recon.
sim.psfr      = 0     #Save PSF reconstruction telemetry.
sim.ecnn      = 0     #Estimate WF covariance due to WFS noise cov Cnn.
sim.wfsalias  = 0     #Study the wfs aliasing effect by project turbulence onto
  	      	      #the orthogonal of the DM vector space.
sim.idealfit  = 0     #evaluation ideal fit error only. no wfs, no recon. (was fitonly)
sim.idealtomo = 0     #ideal tomography without wfs (directly propagate from turbulence).
sim.idealwfs  = 0     #Implements ideal WFS by only using turbulence in DM range. conflicts sim.wfsalias
sim.idealevl  = 0     #Evaluate the performance only in DM range.

#Common atmospheric parameters
atm.method    = 0      #0: Von Karman. 1: Fractal method. 2: Biharmonic. 
atm.size      = [64 64]#size of atmosphere in meter. 0: automatic.
atm.dx        = 1/64   #sampling of the atmosphere, match evl.dx
atm.wdrand    = 1      #>0: as additional seed to randomize wind direction 
atm.frozenflow= 1      #using frozen flow screen (at OL. CL is always frozenflow)
atm.ninit     = 17     #Initial size of the screen in fractal method. >=2
atm.share     = 1      #We share atmosphere by default.
atm.r0evolve  = 0      #0: disable. 1: Scale turbulence screen spatially by r0logpsds, 2) Scale Raytracing using r0logpsdt, 3) both.
atm.r0logpsdt = [-1.43 3.353e-4 0 0.3107] #[alpha beta fmin fmax]:temporal PSD of log(r0) /Hz: beta*f^alpha. Or a file of nx2
atm.r0logpsds = [-2.43 5.195e-5 0 1/30] #[alpha beta fmin fmax]:spatial PSD of log(r0) /Hz: beta*f^alpha. Or a file of nx2
#Reconstructor parameters
atmr.dx       = 0      #Fundemental reconstructio grid sampling. 0: matching
		       #minimum of actuator spacing and subaperture size.
atmr.r0z      = ref:atm.r0z #atm r0 at zenith. -1: matches atm.r0z
atmr.L0       = ref:atm.L0  #atm outer scale.  -1: matches atm.l0
atmr.os       = [2]         #reconstruction screen oversampling over atmr.dx
atmr.ht       = ref:atm.ht  #reconstructed screen height. Empty meaning follow atm.ht (MCAO)
atmr.wt       = ref:atm.wt  #reconstructed screen weight. Empty meaning follow atm.wt (MCAO)

#CN2 Estimation
cn2.pair      = []    #pairs of wfs to estimate cn2. empty to disable cn2 estimation.
cn2.step      = 100   #do cn2 estimation every this time step
cn2.reset     = 0     #reset the accumulated cn2 after every cn2.reset set of results
cn2.hmax      = 18000 #maximum height to esimate at zenith
cn2.saat      = 0.95  #subaperture area threashold to use in cn2 estimation
cn2.keepht    = 1     #1: Interpolate slodar results onto atmr.ht. 2: do slodar directly on these layers.
cn2.tomo      = 0     #1: update tomography parameters 
cn2.verbose   = 1     #output estimated r0, cn2 during simulation
cn2.nhtomo    = 6     #number of layers to feed into reconstructor. only effective if keepht==0
cn2.psol      = 1     #1: use pseudo open loop gradients. 0: to probe residual turbulence
cn2.moveht    = 0     #move the ht used for reconstructor to near strongest layers. only
                      #effective if keepht=0.

#set MOAO DMs parameters. See dm.* for definition
moao.dx       = [0.5] #spacing of actuator
moao.iac      = [0.223] 
moao.gdm      = [0.5] #low pass filter gain on MOAO DM command.
moao.stroke   = [inf]
moao.actslave = [0]
moao.lrt_ptt  = [0]
moao.guard    = [1]
moao.actstuck = [""]
moao.actfloat = [""]
moao.ar       = [1]

#some common fov parameters
evl.dx      = ref:atm.dx  #sampling of the aperture in simulation. -1: follow atm.dx
evl.psfr    = [0] 	  #output psf reconstruction telemetry for this direction.
evl.hs      = [inf]       #the height of the science object. normally infinity. 
evl.rmax    = 1           #max radial order in performance evaluation. 
	          	  #1: includes piston/tip/tilt. 2: p/t/t/focus/astigmatism
evl.tomo    = 0 	  #evaluate CL error for tomography
evl.moao    = -1 	  #index into MOAO config in recon.conf
evl.psfhist = 0 	  #output history of the complex psf (a lot of storage). 
evl.psfmean = 1 	  #output time averaged psf. for this number of psf''s along the
			  #way. 1: only save in the end. n: save  average every n steps (no reset after saving)
evl.psfol   = 1 	  #compute OL psf in additional to CL PSF. 0: disable 1: on axis
	        	  #direction only, 2: all directions and average them. mode removed in ahst. 3: both.
evl.pttr    = [0] 	  #remove p/t/t in wavefront OPD before computing PSF or covariance
evl.cov     = 0 	  #save covariance of opd for directions for steps like evl.psfmean (no reset after saving)
evl.opdmean = 0 	  #save science opd time average every this time step if >0.
evl.psf     = [1 1 1 1 1] #Include this direction if psf is computed. 1 or nevl elements. 1: regular, 2: ngs
evl.wvl     = [0.8e-6 1.0e-6 1.25e-6 1.65e-6 2.12e-6] #wavelength to evaluate PSF or strehl
evl.psfsize = [256    256    256     256     256]     #size of the psf to output. The large PSF is cut to this
		     #size. Set to 1 to compute strehl only. 1 or nwvl number of
		     #elements(for each wvl)

evl.psfisim = 20     #time step to start psfmean/psfhist
evl.psfgridsize = [] #FFT grid size for psf computation for each
		     #wavelength. 0,1,or nwvl number of elements. 0:
		     #automatic. This determines the sampling of the computed
		     #PSF. length matches evl.wvl


#Use powfs.misregx/y instead for WFS misregistration (shift)
#Use aper.misreg instead for telescope pupil miregistration (shift)
distortion.tel2wfs = [] #From telescope pupil (atmosphere) to WFS.  It handles SA thresholding correctly.
distortion.dm2wfs  = [] #From DM to WFS. "0.5+x; 0.2+y" #for pure shift of 0.5, 0.2 along x and y. 
distortion.dm2sci  = [] #From DM to science.

# NOTE: surf phase screen parameters (r0, l0) currently being tuned by Brooke DiGia as of 11/15/2023, will update with tuned values ASAP
#surf=["'r0=1.7;l0=10;ht=40000;slope=-4; SURFWFS=0; SURFEVL=1; seed=10;'"]
#surf=["'r0=0.10;l0=5;ht=0;dx=1/64;nx=2048;slope=-3; SURFWFS=1; SURFEVL=1;seed=10;'"] #use with NCPA calibration (preferred)
#surf=["Keck_ncpa_rmswfe130nm.fits", "'r0=0.1;l0=10;ht=40000;slope=-2; SURFWFS=1; SURFEVL=1; seed=10;'"] # r0 previously 1.0, changed to 0.61
#surf=["Keck_ncpa_rmswfe130nm.fits"]
#surf=[]          #Simulating surfaces like the telescope or NCPA.
                 #Each file contains a dmat array with the following key in header.
                 #dx: the sampling along x and y direction (must be the same)
                 #ox,oy: the origin along x and y direction
                 #h: height of the surface from pupil.	
                 #Important: The OPD should cover more area (1/2 meter each side) than meta pupil for interpolation.

tsurf=[]         #Simulating surfaces on M3 that is tilted in converging beam
                 #Each file contains a dmat array of surface map (NOT OPD)
                 #with the following key in header.
                 #dx,dy: the sampling along x and y direction, 
                 #ox,oy: the origin along x and y direction, 
                 #txdeg: the x tilt angle in degree wrt beam (90 is prep), 
                 #tydeg: the y tilt angle in degree wrt beam (90 is prep), 
                 #ftel: The telescope effective focal length, 
                 #fexit: the distance between the exit pupil and the focus, 
                 #fsurf: the distance between the M3 and the focus.

#TEST
atm.wddeg=0
